# -*- coding: utf-8 -*-
"""
=======================================
Read and plot an image from a FITS file
=======================================

This example opens an image stored in a FITS file and displays it to the screen.

This example uses `astropy.utils.data` to download the file, `astropy.io.fits` to open
the file, and `matplotlib.pyplot` to display the image.


*By: Lia R. Corrales, Adrian Price-Whelan, Kelle Cruz*

*License: BSD*


"""

##############################################################################
# Set up matplotlib and use a nicer set of plot parameters
import numpy as np
import astropy.io.fits as fits
import matplotlib as mpl
from astropy.nddata import Cutout2D
from astropy import units as u
from matplotlib.colors import LogNorm
import matplotlib.pyplot as plt
from astropy.visualization import astropy_mpl_style
cmap = mpl.cm.get_cmap("inferno_r")
cmap2 = mpl.cm.get_cmap("inferno")
astropy_mpl_style['axes.grid'] = False
plt.style.use(astropy_mpl_style)

##############################################################################
# Download the example FITS files used by this example:

from astropy.utils.data import get_pkg_data_filename
from astropy.io import fits

image_file = get_pkg_data_filename('DES0312-5457_det.fits')

##############################################################################
# Use `astropy.io.fits.info()` to display the structure of the file:

fits.info(image_file)

##############################################################################
# Generally the image information is located in the Primary HDU, also known
# as extension 0. Here, we use `astropy.io.fits.getdata()` to read the image
# data from this first extension using the keyword argument ``ext=0``:

image_data = fits.getdata(image_file, ext=0)

##############################################################################
# The data is now stored as a 2D numpy array. Print the dimensions using the
# shape attribute:

print(image_data.shape)

##############################################################################
# Display the image data:
image_data[image_data < 0.] == 0
#plt.imshow(image_data, cmap='gray')
#plt.savefig('DES0312-5457.jpeg')

#Next we can create a cutout for the single object in this image. We create a cutout centered at position (x, y) = (49.7, 100.1) with a size of (ny, nx) = (41, 51) pixels:

position = (4600., 1400.)
size = (100, 100)     # pixels
cutout = Cutout2D(image_data, position, size)

#The size keyword can also be a Quantity object:

size = u.Quantity((100, 100), u.pixel)
cutout = Cutout2D(image_data, position, size)

#Or contain Quantity objects:
size = (100.*u.pixel, 100.*u.pixel)
cutout = Cutout2D(image_data, position, size)

#A square cutout image can be generated by passing an integer or a scalar Quantity:
size = 100
cutout2 = Cutout2D(image_data, position, size)

size = 100 * u.pixel
cutout2 = Cutout2D(image_data, position, size)

#The cutout array is stored in the data attribute of the Cutout2D instance. If the copy keyword is False (default), then cutout.data will be a view into the original data array. If copy=True, then cutout.data will hold a copy of the original data. Now we display the cutout image:
cutout = Cutout2D(image_data, position, (100,100))
plt.imshow(image_data, origin='lower')
plt.colorbar()
plt.show()
